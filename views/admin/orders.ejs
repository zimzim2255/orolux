<!DOCTYPE html>
<html>
<head>
  <title>View Orders | Admin</title>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Cormorant+Garamond:wght@400;600&family=Montserrat:wght@300;400&display=swap">
  <!-- Add required libraries -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script src="/js/order-pdf.js"></script>
  <style>
    :root {
      --deep-blue: #1a1a2e;
      --cream: #f8f8f8;
      --gold: #c9a959;
      --light-gold: rgba(201, 169, 89, 0.1);
      --border-color: #e5e5e5;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Montserrat', sans-serif;
      min-height: 100vh;
      background: var(--cream);
      color: var(--text-color);
      padding: 3rem;
      line-height: 1.6;
    }

    .container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 2rem;
    }

    .header {
      text-align: center;
      margin-bottom: 3rem;
      position: relative;
    }

    .header h1 {
      font-family: 'Cormorant Garamond', serif;
      color: var(--deep-blue);
      font-size: 2.5rem;
      margin-bottom: 1rem;
      letter-spacing: 1px;
    }

    .filters {
      display: flex;
      gap: 2rem;
      margin-bottom: 3rem;
      justify-content: center;
      align-items: center;
    }

    .filter-group {
      margin-bottom: 2rem;
      display: flex;
      gap: 1rem;
      align-items: center;
    }

    .filter-group label {
      font-size: 0.9rem;
      text-transform: uppercase;
      letter-spacing: 1px;
      color: var(--deep-blue);
    }

    .filter-select {
      padding: 0.5rem 1rem;
      border: 1px solid var(--border-color);
      border-radius: 6px;
      background: white;
      color: var(--deep-blue);
      font-size: 0.9rem;
      min-width: 150px;
    }

    .filter-select:focus {
      outline: none;
      border-color: var(--gold);
    }

    .search-container {
      margin-bottom: 2rem;
      max-width: 600px;
      margin: 0 auto 2rem;
    }

    .search-form {
      display: flex;
      gap: 1rem;
      align-items: center;
    }

    .search-input {
      flex: 1;
      padding: 0.75rem;
      border: 1px solid var(--border-color);
      border-radius: 6px;
      font-family: 'Montserrat', sans-serif;
      color: var(--deep-blue);
      transition: all 0.3s ease;
    }

    .search-input:focus {
      outline: none;
      border-color: var(--gold);
      box-shadow: 0 0 0 2px rgba(201, 169, 89, 0.1);
    }

    .search-button {
      padding: 0.75rem 1.5rem;
      background: var(--deep-blue);
      color: white;
      border: none;
      border-radius: 6px;
      font-family: 'Montserrat', sans-serif;
      font-size: 0.9rem;
      letter-spacing: 1px;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .search-button:hover {
      background: var(--gold);
    }

    .orders-table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0;
      margin: 2rem 0;
      background: white;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    }

    .orders-table th {
      background: var(--deep-blue);
      color: white;
      font-weight: 500;
      padding: 1rem 1.5rem;
      text-align: left;
      font-size: 0.9rem;
      letter-spacing: 0.5px;
    }

    .orders-table td {
      padding: 1rem 1.5rem;
      border-bottom: 1px solid var(--border-color);
      vertical-align: top;
    }

    .product-list {
      background: var(--cream);
      border-radius: 8px;
      overflow: hidden;
    }

    .product-item {
      padding: 0.8rem;
      border-bottom: 1px solid var(--light-gold);
      transition: background-color 0.3s;
    }

    .product-item:hover {
      background-color: white;
    }

    .product-name {
      color: var(--deep-blue);
      font-weight: 500;
      margin-bottom: 0.3rem;
    }

    .product-pricing {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: var(--deep-blue);
    }

    .product-quantity {
      background: var(--light-gold);
      padding: 0.2rem 0.6rem;
      border-radius: 15px;
      font-size: 0.9rem;
      color: var(--deep-blue);
    }

    .product-total-price {
      font-family: 'Cormorant Garamond', serif;
      color: #2d7a2d;
      font-weight: 600;
    }

    .status-badge {
      display: inline-block;
      padding: 0.4rem 1rem;
      border-radius: 20px;
      font-size: 0.85rem;
      font-weight: 500;
    }

    .status-pending { background: #fff3cd; color: #856404; }
    .status-processing { background: #cce5ff; color: #004085; }
    .status-completed { background: #d4edda; color: #155724; }
    .status-cancelled { background: #f8d7da; color: #721c24; }

    .action-buttons {
      display: flex;
      gap: 0.8rem;
      align-items: center;
    }

    .btn {
      padding: 0.5rem 1rem;
      border: none;
      border-radius: 6px;
      font-size: 0.9rem;
      cursor: pointer;
      transition: all 0.3s;
    }

    .btn-primary {
      background: var(--deep-blue);
      color: white;
    }

    .btn-primary:hover {
      background: var(--gold);
    }

    .btn-danger {
      background: #dc3545;
      color: white;
    }

    .btn-danger:hover {
      background: #bd2130;
    }

    @media (max-width: 1200px) {
      .orders-table {
        display: block;
        overflow-x: auto;
      }
      
      body {
        padding: 2rem;
      }
    }

    @media (max-width: 768px) {
      body {
        padding: 1.5rem;
      }

      .header h1 {
        font-size: 2rem;
      }

      .filters {
        flex-direction: column;
        gap: 1rem;
      }

      .filter-group {
        width: 100%;
      }

      .filter-select {
        width: 100%;
      }
    }

    @media (max-width: 1024px) {
      .orders-table {
        display: block;
        overflow-x: auto;
      }

      .container {
        padding: 1rem;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <header class="header">
      <h1>Order Management</h1>
    </header>

    <div class="search-container">
      <form action="/admin/orders" method="GET" class="search-form">
        <input 
          type="search" 
          name="search" 
          placeholder="Search by order ID or customer name..." 
          class="search-input"
          value="<%= typeof searchQuery !== 'undefined' ? searchQuery : '' %>"
        >
        <button type="submit" class="search-button">Search</button>
      </form>
    </div>

    <div class="filters">
      <div class="filter-group">
        <label for="status-filter">Status:</label>
        <select id="status-filter" class="filter-select">
          <option value="all">All Orders</option>
          <option value="pending">Pending</option>
          <option value="processing">Processing</option>
          <option value="completed">Completed</option>
          <option value="cancelled">Cancelled</option>
        </select>
      </div>
      <div class="filter-group">
        <label for="date-filter">Date Range:</label>
        <select id="date-filter" class="filter-select">
          <option value="all">All Time</option>
          <option value="today">Today</option>
          <option value="week">This Week</option>
          <option value="month">This Month</option>
        </select>
      </div>
    </div>

    <table class="orders-table">
      <thead>
        <tr>
          <th>Order ID</th>
          <th>Customer</th>
          <th>Products</th>
          <th>Delivery Info</th>
          <th>Total</th>
          <th>Status</th>
          <th>Date</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <% orders.forEach(order => { %>
          <tr data-order-id="<%= order._id %>">
            <td><%= order._id %></td>
            <td>
              <%= order.userId ? 'Registered User' : 'Guest' %><br>
              <small><%= order.deliveryInfo.email || 'No email' %></small>
            </td>
            <td>
              <div class="product-list">
                <% order.products.forEach(product => { %>
                  <div class="product-item">
                    <div class="product-name">
                      <%= product.productId ? product.productId.name : 'Product not found' %>
                    </div>
                    <div class="product-pricing">
                      <span class="product-quantity">× <%= product.quantity %></span>
                      <span class="product-total-price">
                        $<%= ((product.price || (product.productId && product.productId.price) || 0) * product.quantity).toFixed(2) %>
                      </span>
                    </div>
                  </div>
                <% }) %>
              </div>
            </td>
            <td>
              <%= order.deliveryInfo.name %><br>
              <%= order.deliveryInfo.phone %><br>
              <%= order.deliveryInfo.address %>
            </td>
            <td>
              <strong>$<%= order.total ? order.total.toFixed(2) : '0.00' %></strong>
            </td>
            <td>
              <span class="status-badge status-<%= order.status.toLowerCase() %>">
                <%= order.status %>
              </span>
            </td>
            <td>
              <%= new Date(order.createdAt).toLocaleString() %>
            </td>
            <td>              <div class="action-buttons">
                <form action="/admin/orders/<%= order._id %>/status" method="POST" style="display: inline;">
                  <select name="status" class="filter-select" onchange="this.form.submit()">
                    <option value="Pending" <%= order.status === 'Pending' ? 'selected' : '' %>>Pending</option>
                    <option value="Processing" <%= order.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                    <option value="Completed" <%= order.status === 'Completed' ? 'selected' : '' %>>Completed</option>
                    <option value="Cancelled" <%= order.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                  </select>
                </form>
                <button class="btn btn-primary" onclick="printOrder('<%= order._id %>')">Print</button>
                <button class="btn btn-danger" onclick="deleteOrder('<%= order._id %>')">🗑️ Delete</button>
              </div>
            </td>
          </tr>
        <% }) %>
      </tbody>
    </table>

    <a href="/admin/dashboard" class="back-button">Back to Dashboard</a>
  </div>

  <script>
    // Initialize jsPDF
    window.jspdf = window.jspdf || {};
    window.jspdf.jsPDF = window.jspdf.jsPDF;

    // Filter functionality
    document.getElementById('status-filter').addEventListener('change', filterOrders);
    document.getElementById('date-filter').addEventListener('change', filterOrders);

    function filterOrders() {
      const statusFilter = document.getElementById('status-filter').value;
      const dateFilter = document.getElementById('date-filter').value;
      const rows = document.querySelectorAll('.orders-table tbody tr');

      rows.forEach(row => {
        const status = row.querySelector('.status-badge').textContent.trim().toLowerCase();
        const date = new Date(row.querySelector('td:nth-child(7)').textContent);
        let showRow = true;

        if (statusFilter !== 'all' && status !== statusFilter) {
          showRow = false;
        }

        if (dateFilter !== 'all') {
          const today = new Date();
          const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
          const monthAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);

          if (dateFilter === 'today' && date.toDateString() !== today.toDateString()) {
            showRow = false;
          } else if (dateFilter === 'week' && date < weekAgo) {
            showRow = false;
          } else if (dateFilter === 'month' && date < monthAgo) {
            showRow = false;
          }
        }

        row.style.display = showRow ? '' : 'none';
      });
    }

    // Delete order functionality
    function deleteOrder(orderId) {
      if (confirm('Are you sure you want to delete this order? This action cannot be undone.')) {
        window.location.href = `/admin/orders/delete/${orderId}`;
      }
    }

    // Print order functionality
    async function printOrder(orderId) {
      try {
        await generateOrderPDF(orderId);
      } catch (error) {
        console.error('Error generating PDF:', error);
        alert('There was an error generating the PDF. Please try again.');
      }
    }

    function printOrder(orderId) {
      if (typeof generateOrderPDF === 'function') {
        generateOrderPDF(orderId);
      } else {
        console.error('PDF generation function not found');
        alert('Error: PDF generation is not available');
      }
    }
  </script>
</body>
</html>